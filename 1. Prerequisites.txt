1. Provision an EC2 Amazon Linux instance and create a role called EksCodeBuildKubectlRole that has eks:Describe* access and associate that with the aws-auth configmap in kube-system.

# Export your Account ID
export ACCOUNT_ID=100163808729

# Set Trust Policy
TRUST="{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::${ACCOUNT_ID}:root\" }, \"Action\": \"sts:AssumeRole\" } ] }"

# Verify inside Trust policy, your account id got replacd
echo $TRUST

# Create IAM Role for CodeBuild to Interact with EKS
aws iam create-role --role-name EksCodeBuildKubectlRole --assume-role-policy-document "$TRUST" --output text --query 'Role.Arn'

# Define Inline Policy with eks Describe permission in a file iam-eks-describe-policy
echo '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": "eks:Describe*", "Resource": "*" } ] }' > /tmp/iam-eks-describe-policy

# Associate Inline Policy to our newly created IAM Role
aws iam put-role-policy --role-name EksCodeBuildKubectlRole --policy-name eks-describe --policy-document file:///tmp/iam-eks-describe-policy

# Verify the same on Management Console

2. Create a policy called eks-codebuild-sts-assume-role:

In Visual Editor Tab:
Service: STS
Actions: Under Write - Select AssumeRole
Resources: Specific
Add ARN
Specify ARN for Role: arn:aws:iam::100163808729:role/EksCodeBuildKubectlRole
Click Create Policy

3. Then go to the CodeBuild Service Role and attach the above policy eks-codebuild-sts-assume-role. Code Build project creation is shown in 2. Steps followed.txt.
Now AWS CodeBuild has access to EKS cluster and can deploy kube manifests in the cluster.


4.

Now that we have the IAM role created, we are going to add the role to the aws-auth ConfigMap for the EKS cluster.
Once the ConfigMap includes this new role, kubectl in the CodeBuild stage of the pipeline will be able to interact with the EKS cluster via the IAM role.

# Verify what is present in aws-auth configmap before change
kubectl get configmap aws-auth -o yaml -n kube-system

# Export your Account ID
export ACCOUNT_ID=100163808729

# Set ROLE value
ROLE="    - rolearn: arn:aws:iam::$ACCOUNT_ID:role/EksCodeBuildKubectlRole\n      username: build\n      groups:\n        - system:masters"

# Get current aws-auth configMap data and attach new role info to it
kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"$ROLE\";next}1" > /tmp/aws-auth-patch.yml

# Patch the aws-auth configmap with new role
kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"

# Verify what is updated in aws-auth configmap after change
kubectl get configmap aws-auth -o yaml -n kube-system

apiVersion: v1
data:
  mapRoles: |
    - rolearn: arn:aws:iam::100163808729:role/EksCodeBuildKubectlRole
      username: build
      groups:
        - system:masters
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: arn:aws:iam::100163808729:role/eksctl-eksdemo1-nodegroup-eksdemo-NodeInstanceRole-6G8TD7LZUQZA
      username: system:node:{{EC2PrivateDNSName}}
kind: ConfigMap
metadata:
  creationTimestamp: "2023-10-02T01:09:10Z"
  name: aws-auth
  namespace: kube-system
  resourceVersion: "2018"
  uid: c1731aec-e0a8-4603-8503-da97f41a8e85


Summarizing, create a role that has eks:Describe* access and associate the role with both CodeBuild service role and the aws-auth ConfigMap of the EKS cluster.
The first one - associating with CodeBuild service role - is for CodeBuild service to be able to interact with EKS cluster.
The second one - associating with the aws-auth ConfigMap of the EKS cluster - is for kubectl commands within the CodeBuild project to be able to interact with the EKS cluster.